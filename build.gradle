plugins {
	id("java-library")
	id("net.auoeke.gronk").version("4.+")
	id("me.champeau.jmh").version("latest.release")
}

group("net.auoeke")
version("6.1.4")
description("succinct and unrestricted reflection")
javaVersion(17)

gronk {
	publish {
		scm = "https://github.com/auoeke/reflect"
		license = ""
		email = "tjmnkrajyej@gmail.com"
	}
}

sourceSets {
	jmh {
		java.srcDirs = ["benchmark"]
	}
}

configurations {
	[jmhAnnotationProcessor, testAnnotationProcessor]*.tap {
		extendsFrom(annotationProcessor)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	annotationProcessor("net.auoeke:dycon-javac-all", "net.auoeke:uncheck-all")
	compileOnly("net.auoeke:dycon")
	api("net.auoeke:result", "net.auoeke:unsafe")

	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
	testImplementation(
		"org.junit.jupiter:junit-jupiter-api",
		"org.ow2.asm:asm-tree",
		"org.openjdk.jol:jol-core"
	)
}

compileJava {
	options.release = java.targetCompatibility.majorVersion as int

	javaCompiler = javaToolchains.compilerFor {
		languageVersion = JavaLanguageVersion.of(19)
	}
}

compileTestJava {
	mustRunAfter(jar)

	options.release.set(JavaVersion.current().majorVersion as int)
	options.compilerArgs << "--enable-preview"
}

jmh {
	fork = 1
	warmup = "500ms"
	timeOnIteration = "300ms"
	includes = ["Address"]
}

test {
	dependsOn(cleanTest)

	useJUnitPlatform()
	systemProperty("junit.jupiter.testclass.order.default", 'org.junit.jupiter.api.ClassOrderer$OrderAnnotation')
	jvmArgs("-XX:+IgnoreUnrecognizedVMOptions", "-Xdump:none", "-XX:ErrorFile=${systemProperty("java.io.tmpdir")}/java_err_%p.log")
}

jar {
	manifest.from("resources/META-INF/MANIFEST.MF")
}

jmhJar {
	manifest.from(jar.manifest)
}

javadoc {
	options {
		addBooleanOption("Xdoclint:none", true)
	}
}

// For Reflect::instrumentation.
task testRelease(type: Test, group: LifecycleBasePlugin.VERIFICATION_GROUP, dependsOn: ["cleanTestRelease", jar]) {
	check.dependsOn(it)

	useJUnitPlatform()
	systemProperty("junit.jupiter.testclass.order.default", 'org.junit.jupiter.api.ClassOrderer$OrderAnnotation')
	classpath = classpath - sourceSets.main.output + files(jar.archiveFile)
}
