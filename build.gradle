plugins {
    id("java-library")
    id("maven-publish")
    id("signing")
    id("gronk").version("latest.release")
    id("me.champeau.jmh").version("latest.release")
}

group("net.auoeke")
version("5.2.1")
description("succinct and unrestricted reflection")
url("https://github.com/auoeke/reflect")
javaVersion(17)

sourceSets {
    jmh {
        java.srcDirs = ["benchmark"]
    }
}

configurations {
    [jmhAnnotationProcessor, testAnnotationProcessor]*.tap {
        extendsFrom(annotationProcessor)
    }
}

java {
    withJavadocJar()
}

repositories {
    mavenCentral()
    maven("maven.auoeke.net")
}

dependencies {
    ["annotationProcessor", "jmhAnnotationProcessor", "testAnnotationProcessor"].each {add(it, "net.auoeke:uncheck-all")}
    api("net.auoeke:unsafe")

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testImplementation(
        "org.junit.jupiter:junit-jupiter-api",
        "org.ow2.asm:asm-tree",
        "org.openjdk.jol:jol-core"
    )
}

compileTestJava {
    mustRunAfter(jar)

    options.release.set(JavaVersion.current().majorVersion as int)
    options.compilerArgs << "--enable-preview"
}

jmh {
    fork = 1
    warmup = "500ms"
    timeOnIteration = "300ms"
}

test {
    dependsOn(cleanTest)

    useJUnitPlatform()
    systemProperty("junit.jupiter.testclass.order.default", 'org.junit.jupiter.api.ClassOrderer$OrderAnnotation')
    jvmArgs("-XX:+IgnoreUnrecognizedVMOptions", "-Xdump:none", "-XX:ErrorFile=${systemProperty("java.io.tmpdir")}/java_err_%p.log")
}

jar {
    manifest.from("resources/META-INF/MANIFEST.MF")
}

javadoc {
    options {
        addBooleanOption("Xdoclint:none", true)
    }
}

// For Reflect::instrumentation.
task testRelease(type: Test) {
    group(LifecycleBasePlugin.VERIFICATION_GROUP)
    dependsOn(cleanTestRelease, jar)
    check.dependsOn(it)

    useJUnitPlatform()
    systemProperty("junit.jupiter.testclass.order.default", 'org.junit.jupiter.api.ClassOrderer$OrderAnnotation')
    classpath = classpath - sourceSets.main.output + files(jar.archiveFile)
}

publishing {
    repositories {
        mavenLocal()

        maven("s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
            username(findProperty("ossrh.id"))
            password(findProperty("ossrh.password"))
        }
    }

    publications.withType(MavenPublication) {MavenPublication publication ->
        publication.pom {
            licenses {
                license {
                    name.set("LGPL-3.0")
                    url.set("https://www.gnu.org/licenses/lgpl-3.0.html")
                }
            }

            developers {
                developer {
                    id.set("auoeke")
                    email.set("me@auoeke.net")
                }
            }

            scm {
                connection.set("scm:git:git://github.com/auoeke/reflect.git")
                developerConnection.set("scm:git:git://github.com/auoeke/reflect.git")
                url.set("https://github.com/auoeke/reflect/tree/master")
            }
        }
    }
}
