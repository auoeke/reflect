plugins {
    id("java")
    id("gronk").version("latest.release")
    id("com.github.johnrengelman.shadow").version("latest.release")
}

configurations {
    reflect
}

repositories {
    mavenCentral()
    maven("maven.auoeke.net")
}

dependencies {
    reflect("net.auoeke:reflect")

    implementation("org.ow2.asm:asm-tree")
    implementation("net.bytebuddy:byte-buddy-agent")
    implementation("net.auoeke:uncheck") {
        exclude(module: "net.auoeke:reflect")
    }
}

shadowJar {
    configurations = [project.configurations.reflect]
    transform(ManifestMerger)
}

class ManifestMerger implements Transformer {
    private Manifest manifest = null

    boolean canTransformResource(FileTreeElement element) {
        return element.relativePath.pathString == JarFile.MANIFEST_NAME
    }

    void transform(TransformerContext context) {
        Manifest manifest = new Manifest().tap {read(context.is)}
        this.manifest == null ? this.manifest = manifest : this.manifest.mainAttributes.putAll(manifest.mainAttributes)
    }

    boolean hasTransformedResource() {
        return this.manifest
    }

    void modifyOutputStream(ZipOutputStream os, boolean preserveFileTimestamps) {
        os.putNextEntry(new ZipEntry(JarFile.MANIFEST_NAME))
        manifest.write(os)
    }
}

import java.util.jar.JarFile
import java.util.jar.Manifest
import com.github.jengelman.gradle.plugins.shadow.transformers.Transformer
import com.github.jengelman.gradle.plugins.shadow.transformers.TransformerContext
import shadow.org.apache.tools.zip.ZipEntry
import shadow.org.apache.tools.zip.ZipOutputStream
